<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="45">
  <CheatEntries>
    <CheatEntry>
      <ID>276</ID>
      <Description>"xspeed"</Description>
      <ShowAsSigned>0</ShowAsSigned>
      <VariableType>Double</VariableType>
      <Address>873EA458</Address>
      <CheatEntries>
        <CheatEntry>
          <ID>277</ID>
          <Description>"yspeed"</Description>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>Double</VariableType>
          <Address>+8+8</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>278</ID>
      <Description>"Gear system"</Description>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{$lua}

[ENABLE]

-- This script ensures that while pressing UP (↑), you (or any character/object
-- whose speed is represented in the cheat table with memory records named
-- 'xspeed' and 'yspeed') move with constant speed in whichever direction you're currently going.
--
-- ⚡ The constant speed comes from the 'speedTable' below, where you can pick gears
--   (10, 20, 40, 80) with W/S hotkeys.
-- ⚡ While pressing UP, it normalizes your velocity vector (x/y) to have length = gear speed.
-- ⚡ Pressing DOWN instantly zeroes out velocity (a quick stop).
--
-- ✨ Improvements over the crashing version:
--   1. Freshly fetches memory records each time (so no stale references).
--   2. Handles missing memory records gracefully (if nil, script no-ops instead of crashing).
--   3. Division by zero guard (if x=y=0, skip math).
--   4. Proper cleanup in [DISABLE] to avoid duplicate hotkeys.

-- List of available speeds (like “gears”)
local speedTable={2,4,8,16,24,36}
local index=1  -- current gear index (starts at 1)

-- Names of the cheat table entries holding velocity components
local speedXString='xspeed'
local speedYString='yspeed'

----------------------------------------------------------------------
-- Utility: get length of Lua table (since we cycle through speedTable)
----------------------------------------------------------------------
local function getLen(tbl)
  local count=0
  for _ in pairs(tbl) do count=count+1 end
  return count
end

----------------------------------------------------------------------
-- Helper: resolve memory record handles every time
-- This avoids stale references when you save/load tables or re-open CE
----------------------------------------------------------------------
local function getRecords()
  local t=getAddressList()
  local xr = t.getMemoryRecordByDescription(speedXString)
  local yr = t.getMemoryRecordByDescription(speedYString)
  return xr, yr
end

----------------------------------------------------------------------
-- Main action: normalize current velocity to selected 'gear' speed
--  Called when UP arrow is pressed (0x26).
----------------------------------------------------------------------
local function normalizeSpeed()
  local xr, yr = getRecords()
  if not xr or not yr then return end -- safety: no addresses, no adjustments

  local vx = tonumber(xr.Value) or 0
  local vy = tonumber(yr.Value) or 0
  local r = math.sqrt(vx*vx + vy*vy)

  if r &lt; speedTable[1] then return end  -- guard: avoid division by zero if stationary

  local ratio = speedTable[index]/r
  xr.Value = vx*ratio
  yr.Value = vy*ratio
end

----------------------------------------------------------------------
-- Stop action: sets both speed components to 0 instantly
--  Called when DOWN arrow is pressed (0x28).
----------------------------------------------------------------------
local function stopSpeed()
  local xr, yr = getRecords()
  if xr and yr then
    xr.Value=0
    yr.Value=0
  end
end

----------------------------------------------------------------------
-- Hotkeys setup
-- W (0x57): gear up
-- S (0x53): gear down
-- UP arrow (0x26): normalize velocity
-- DOWN arrow (0x28): stop immediately
----------------------------------------------------------------------

incGear=createHotkey(function()
  if index &lt; getLen(speedTable) then
    index=index+1
  end
end,0x57)

decGear=createHotkey(function()
  if index &gt; 1 then
    index=index-1
  end
end,0x53)

hk1=createHotkey(function()
  normalizeSpeed()
end,0x26)   -- UP arrow

hk2=createHotkey(function()
  stopSpeed()
end,0x28)   -- DOWN arrow

[DISABLE]

-- Clean up hotkeys properly so they don't pile up after script disable/enable cycles
if hk1 then hk1.destroy() hk1=nil end
if hk2 then hk2.destroy() hk2=nil end
if incGear then incGear.destroy() incGear=nil end
if decGear then decGear.destroy() decGear=nil end
</AssemblerScript>
    </CheatEntry>
  </CheatEntries>
  <CheatCodes>
    <CodeEntry>
      <Description>Code :movsd xmm0,[rcx+00000088] (y speed)</Description>
      <AddressString>pCARS3.exe+FA15B0</AddressString>
      <Before>
        <Byte>8F</Byte>
        <Byte>A8</Byte>
        <Byte>59</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>F2</Byte>
        <Byte>0F</Byte>
        <Byte>10</Byte>
        <Byte>81</Byte>
        <Byte>88</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>66</Byte>
        <Byte>0F</Byte>
        <Byte>5A</Byte>
        <Byte>C0</Byte>
        <Byte>F3</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Code :movsd xmm0,[rcx+78] (x speed)</Description>
      <AddressString>pCARS3.exe+FA158B</AddressString>
      <Before>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>48</Byte>
        <Byte>8B</Byte>
        <Byte>08</Byte>
      </Before>
      <Actual>
        <Byte>F2</Byte>
        <Byte>0F</Byte>
        <Byte>10</Byte>
        <Byte>41</Byte>
        <Byte>78</Byte>
      </Actual>
      <After>
        <Byte>66</Byte>
        <Byte>0F</Byte>
        <Byte>5A</Byte>
        <Byte>C0</Byte>
        <Byte>F3</Byte>
      </After>
    </CodeEntry>
  </CheatCodes>
  <UserdefinedSymbols/>
  <Comments>x=x
y=x+8+8
z=x+8

So x,z,y where z is up and down and all are in double precision.</Comments>
</CheatTable>
