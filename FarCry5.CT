<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="45">
  <CheatEntries>
    <CheatEntry>
      <ID>9</ID>
      <Description>"SCRIPTS"</Description>
      <Options moAllowManualCollapseAndExpand="1"/>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>1</ID>
          <Description>"30 ammo for all non melee weapons"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : FarCry5.exe
  Version: 
  Date   : 2025-09-26
  Author : atult

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(unlimammo,FC_m64.dll,44 89 83 88 01 00 00) // should be unique
alloc(newmem,$1000,unlimammo)

label(code)
label(return)

newmem:

code:
  mov [rbx+00000188],#30
  jmp return

unlimammo:
  jmp newmem
  nop 2
return:
registersymbol(unlimammo)

[DISABLE]

unlimammo:
  db 44 89 83 88 01 00 00

unregistersymbol(unlimammo)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: FC_m64.dll+A92DDFC

FC_m64.dll+A92DDD6: 48 83 EC 20           - sub rsp,20
FC_m64.dll+A92DDDA: 89 D7                 - mov edi,edx
FC_m64.dll+A92DDDC: 48 89 CB              - mov rbx,rcx
FC_m64.dll+A92DDDF: 3B 91 88 01 00 00     - cmp edx,[rcx+00000188]
FC_m64.dll+A92DDE5: 74 3C                 - je FC_m64.dll+A92DE23
FC_m64.dll+A92DDE7: E8 84 E5 3C F7        - call FC_m64.dll+1CFC370
FC_m64.dll+A92DDEC: 39 F8                 - cmp eax,edi
FC_m64.dll+A92DDEE: C6 83 C4 00 00 00 01  - mov byte ptr [rbx+000000C4],01
FC_m64.dll+A92DDF5: 41 89 F8              - mov r8d,edi
FC_m64.dll+A92DDF8: 44 0F 4C C0           - cmovl r8d,eax
// ---------- INJECTING HERE ----------
FC_m64.dll+A92DDFC: 44 89 83 88 01 00 00  - mov [rbx+00000188],r8d
// ---------- DONE INJECTING  ----------
FC_m64.dll+A92DE03: 85 FF                 - test edi,edi
FC_m64.dll+A92DE05: 7E 07                 - jle FC_m64.dll+A92DE0E
FC_m64.dll+A92DE07: C6 83 D0 01 00 00 00  - mov byte ptr [rbx+000001D0],00
FC_m64.dll+A92DE0E: 48 8B 8B E0 01 00 00  - mov rcx,[rbx+000001E0]
FC_m64.dll+A92DE15: 48 85 C9              - test rcx,rcx
FC_m64.dll+A92DE18: 74 09                 - je FC_m64.dll+A92DE23
FC_m64.dll+A92DE1A: 48 8B 01              - mov rax,[rcx]
FC_m64.dll+A92DE1D: FF 90 E8 00 00 00     - call qword ptr [rax+000000E8]
FC_m64.dll+A92DE23: 48 8B 5C 24 30        - mov rbx,[rsp+30]
FC_m64.dll+A92DE28: 48 83 C4 20           - add rsp,20
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>74</ID>
          <Description>"Unlimited Health"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{
 This script enables player to be invinsible, even from fall damage. Its based on a pointer to the players health. So find any other player health pointer if this stops working.

 Current address of health is [[[[["FC_m64.dll"+04E78408]+0]+48]+20]+48]+18

 This works because for some reason all kinds of writes to the health of players goes through the same instruction. This one, the one in `code:` block.

}




[ENABLE]

aobscanmodule(no_fall_damage_for_me,FC_m64.dll,F3 0F 11 41 18 45) // patch point: movss [rcx+18],xmm0
alloc(newmem,$1000,no_fall_damage_for_me)

label(code)
label(skip)
label(safeexit)
label(return)

newmem:
  push rax                               // save rax from the game

  // --- Walk pointer chain: 0,48,20,48 ---
  mov rax,["FC_m64.dll"+04E78408]        // base pointer
  test rax,rax
  jz safeexit

  mov rax,[rax+0]                        // offset 0
  test rax,rax
  jz safeexit

  mov rax,[rax+48]                       // offset 48
  test rax,rax
  jz safeexit

  mov rax,[rax+20]                       // offset 20
  test rax,rax
  jz safeexit

  mov rax,[rax+48]                       // offset 48
  test rax,rax
  jz safeexit

  // now rax points to the struct, health = [rax+18]
  cmp rcx,rax
  je skip                                // if this is the health struct, skip the movss

safeexit:
  pop rax
  jmp code

skip:
  pop rax
  jmp return

code:
  movss [rcx+18],xmm0                    // original instruction still applied for non-health
  jmp return

no_fall_damage_for_me:
  jmp newmem
return:

registersymbol(no_fall_damage_for_me)

[DISABLE]

no_fall_damage_for_me:
  db F3 0F 11 41 18

unregistersymbol(no_fall_damage_for_me)
dealloc(newmem)
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>86</ID>
          <Description>"Long Jump"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}

[ENABLE]

-- This script ensures that while pressing UP (↑), you (or any character/object
-- whose x and y speed are in the cheat table as 'xspeed' and 'yspeed'),
-- move at a constant speed in whichever direction you are already traveling.
--
-- ⚡ Unlike the "gear" version, here the target speed magnitude is fixed
--   to one constant value (100 by default).
--
-- ⚡ When UP is pressed, it normalizes the current (x,y) velocity to that fixed length.
-- ⚡ When DOWN is pressed, both speeds are set to 0 (instant stop).
-- ⚡ When UP + SPACE are pressed together, performs a long sustained jump.
-- ⚡ When S is pressed, EMERGENCY STOP - cancels jump and zeros all speeds.

-- Set your constant speed magnitude here:
local speed=10

-- Jump settings:
local jumpSpeedUp=6         -- Upward (z-axis) velocity during uphill phase
local jumpSpeedDown=-6     -- Downward (z-axis) velocity during downhill phase
local jumpHorizontalSpeed=30 -- Horizontal speed during jump
local uphillDuration=3000   -- Duration of uphill phase in milliseconds (10 seconds)
local updateInterval=50      -- How often to update speeds during jump (milliseconds)
local landingThreshold=0.5   -- Z-speed threshold to detect landing (close to 0)

-- Names of the cheat table entries corresponding to velocity components.
local speedXString='xspeed'
local speedYString='yspeed'
local speedZString='zspeed'

-- Jump state tracking - FORCE CLEAN STATE ON ENABLE
local jumpTimer=nil
local jumpPhase=nil
local jumpStartTime=0
local previousZSpeed=0
local isJumpActive=false

-- Clean up any leftover state from previous enable/disable cycle
if jumpTimer then
  pcall(function()
    jumpTimer.Enabled = false
    jumpTimer.destroy()
  end)
  jumpTimer = nil
end
isJumpActive = false
jumpPhase = nil

----------------------------------------------------------------------
-- Get memory record handles fresh each time (avoid stale references)
----------------------------------------------------------------------
local function getRecords()
  local t=getAddressList()
  if not t then return nil, nil, nil end

  local xr = t.getMemoryRecordByDescription(speedXString)
  local yr = t.getMemoryRecordByDescription(speedYString)
  local zr = t.getMemoryRecordByDescription(speedZString)
  return xr, yr, zr
end

----------------------------------------------------------------------
-- Clean up jump timer safely (DEFINED EARLY)
----------------------------------------------------------------------
local function cleanupJumpTimer()
  -- Prevent re-entry if already not active
  if not isJumpActive and not jumpTimer then return end

  isJumpActive = false

  if jumpTimer then
    -- Disable first to stop callbacks
    pcall(function() jumpTimer.Enabled = false end)
    -- Small delay to ensure no callback is mid-execution
    sleep(updateInterval + 10)
    -- Now safe to destroy
    pcall(function() jumpTimer.destroy() end)
    jumpTimer = nil
  end

  jumpPhase = nil
  previousZSpeed = 0
end

----------------------------------------------------------------------
-- EMERGENCY STOP: Cancel everything and zero all speeds
-- Called when S key is pressed (0x53).
----------------------------------------------------------------------
local function emergencyStop()
  -- Cancel any active jump immediately
  if isJumpActive then
    cleanupJumpTimer()
  end

  -- Zero all speeds
  local xr, yr, zr = getRecords()
  if not xr or not yr or not zr then return end

  xr.Value = 0
  yr.Value = 0
  zr.Value = 0
end

----------------------------------------------------------------------
-- Normalize current x,y velocities to the constant speed
-- Called when UP arrow is pressed (0x26).
----------------------------------------------------------------------
local function normalizeSpeed()
  -- Don't interfere with active jump
  if isJumpActive then
    return
  end

  local xr, yr = getRecords()
  if not xr or not yr then return end        -- safety: no records

  local vx = tonumber(xr.Value) or 0
  local vy = tonumber(yr.Value) or 0
  local r = math.sqrt(vx*vx + vy*vy)

  if r &lt; 0.0001 then return end              -- avoid division by zero

  local ratio = speed/r
  xr.Value = vx*ratio
  yr.Value = vy*ratio
end

----------------------------------------------------------------------
-- Stop function: set all velocity components to 0 and cancel jump
-- Called when DOWN arrow is pressed (0x28).
----------------------------------------------------------------------
local function stopSpeed()
  -- First, cancel any active jump
  if isJumpActive then
    cleanupJumpTimer()
    -- Extra wait to ensure timer is fully stopped
    sleep(100)
  end

  local xr, yr, zr = getRecords()
  if not xr or not yr or not zr then return end

  xr.Value=0
  yr.Value=0
  zr.Value=0
end

----------------------------------------------------------------------
-- Check if player has landed (zspeed is near 0 during downhill phase)
----------------------------------------------------------------------
local function hasLanded(currentZSpeed)
  -- During downhill, if zspeed becomes close to 0, we've likely hit the ground
  if jumpPhase == 'downhill' then
    local zSpeedAbs = math.abs(currentZSpeed)
    if zSpeedAbs &lt; landingThreshold then
      return true
    end
  end
  return false
end

----------------------------------------------------------------------
-- Maintain jump speeds continuously during flight
----------------------------------------------------------------------
local function maintainJumpSpeed(timer)
  -- Check if we're still in an active jump (prevents use-after-destroy)
  if not isJumpActive or not jumpTimer then
    return
  end

  local xr, yr, zr = getRecords()
  if not xr or not yr or not zr then
    cleanupJumpTimer()
    return
  end

  local currentZSpeed = tonumber(zr.Value) or 0

  -- Check if we've landed
  if hasLanded(currentZSpeed) then
    cleanupJumpTimer()
    return
  end

  local elapsed = GetTickCount() - jumpStartTime

  -- Determine current phase and vertical speed
  local targetZSpeed = 0

  if elapsed &lt; uphillDuration then
    -- Uphill phase
    jumpPhase = 'uphill'
    targetZSpeed = jumpSpeedUp
  else
    -- Downhill phase (continues until landing)
    jumpPhase = 'downhill'
    targetZSpeed = jumpSpeedDown
  end

  -- Set vertical speed
  zr.Value = targetZSpeed

  -- Maintain horizontal speed
  local vx = tonumber(xr.Value) or 0
  local vy = tonumber(yr.Value) or 0
  local r = math.sqrt(vx*vx + vy*vy)

  if r &gt; 0.0001 then
    local ratio = jumpHorizontalSpeed/r
    xr.Value = vx*ratio
    yr.Value = vy*ratio
  end

  -- Store current zspeed for next iteration
  previousZSpeed = currentZSpeed
end

----------------------------------------------------------------------
-- Jump function: initiate sustained jump with uphill/downhill phases
-- Called when UP + SPACE are pressed together.
----------------------------------------------------------------------
local function performJump()
  -- Don't start new jump if one is already active
  if isJumpActive then
    return
  end

  local xr, yr, zr = getRecords()
  if not xr or not yr or not zr then return end

  -- Clean up any existing jump (shouldn't happen due to above check, but safe)
  cleanupJumpTimer()

  -- Mark jump as active
  isJumpActive = true

  -- Record start time
  jumpStartTime = GetTickCount()
  previousZSpeed = 0
  jumpPhase = 'uphill'

  -- Get current horizontal direction for the jump
  local vx = tonumber(xr.Value) or 0
  local vy = tonumber(yr.Value) or 0
  local r = math.sqrt(vx*vx + vy*vy)

  -- Set initial speeds
  zr.Value = jumpSpeedUp

  if r &gt; 0.0001 then
    local ratio = jumpHorizontalSpeed/r
    xr.Value = vx*ratio
    yr.Value = vy*ratio
  end

  -- Create timer to maintain speeds throughout jump
  jumpTimer = createTimer(nil, false)
  jumpTimer.Interval = updateInterval
  jumpTimer.OnTimer = maintainJumpSpeed
  jumpTimer.Enabled = true
end

----------------------------------------------------------------------
-- Hotkeys
-- UP arrow (0x26): normalize vector to constant speed (disabled during jump)
-- DOWN arrow (0x28): stop ALL movement and cancel jump
-- UP + SPACE (0x26 + 0x20): perform sustained long jump
-- S (0x53): EMERGENCY STOP - cancel jump and zero all speeds immediately
----------------------------------------------------------------------

hk1=createHotkey(function()
  normalizeSpeed()
end,0x26)

hk2=createHotkey(function()
  stopSpeed()
end,0x28)

-- Jump hotkey: UP (0x26) + SPACE (0x20) combination
hk3=createHotkey(function()
  performJump()
end, VK_UP, VK_SPACE)

-- Emergency stop hotkey: S key (0x53)
hk4=createHotkey(function()
  emergencyStop()
end,0x53)

[DISABLE]

-- Mark as inactive to prevent callbacks
isJumpActive = false

-- Clean up jump timer first
if jumpTimer then
  pcall(function() jumpTimer.Enabled = false end)
  sleep(updateInterval + 10)  -- Wait for any pending callbacks
  pcall(function() jumpTimer.destroy() end)
  jumpTimer = nil
end

jumpPhase = nil
previousZSpeed = 0

-- Clean up hotkeys properly, so multiple enables/disables don't leave "ghost" hotkeys
if hk1 then hk1.destroy() hk1=nil end
if hk2 then hk2.destroy() hk2=nil end
if hk3 then hk3.destroy() hk3=nil end
if hk4 then hk4.destroy() hk4=nil end
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>95</ID>
          <Description>"Free all game timers"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
// The address FC_m64.dll+30BBD0 is a jump to the real elapsed-time function.
// We will overwrite this jump with code that immediately returns 0.0,
// effectively freezing the timer by making the elapsed time always zero.

define(ElapsedTimeFunc_jmp, FC_m64.dll+30BBD0)
registersymbol(ElapsedTimeFunc_jmp)

ElapsedTimeFunc_jmp:
  // xorps xmm0, xmm0   ; Set return value (xmm0) to 0.0
  // ret                ; Return from the function
  // nop                ; Pad to 5 bytes to match the original jmp
  db 0F 57 C0 C3 90

[DISABLE]
// Restore the original jump instruction: jmp FC_m64.dll+6292F60
ElapsedTimeFunc_jmp:
  db E9 8B 73 F8 05

unregistersymbol(ElapsedTimeFunc_jmp)

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>8</ID>
          <Description>"Constant Speeder"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}

[ENABLE]

-- This script ensures that while pressing UP (↑), you (or any character/object
-- whose x and y speed are in the cheat table as 'xspeed' and 'yspeed'),
-- move at a constant speed in whichever direction you are already traveling.
--
-- ⚡ Unlike the "gear" version, here the target speed magnitude is fixed
--   to one constant value (100 by default).
--
-- ⚡ When UP is pressed, it normalizes the current (x,y) velocity to that fixed length.
-- ⚡ When DOWN is pressed, both speeds are set to 0 (instant stop).
--
-- ✨ Safety improvements:
--   1. Resolves memory records dynamically (no stale references).
--   2. Avoids division-by-zero issues if the current velocity is 0.
--   3. Proper cleanup in [DISABLE].

-- Set your constant speed magnitude here:
local speed=300

-- Names of the cheat table entries corresponding to velocity components.
local speedXString='xspeed'
local speedYString='yspeed'

----------------------------------------------------------------------
-- Get memory record handles fresh each time (avoid stale references)
----------------------------------------------------------------------
local function getRecords()
  local t=getAddressList()
  local xr = t.getMemoryRecordByDescription(speedXString)
  local yr = t.getMemoryRecordByDescription(speedYString)
  return xr, yr
end

----------------------------------------------------------------------
-- Normalize current x,y velocities to the constant speed
-- Called when UP arrow is pressed (0x26).
----------------------------------------------------------------------
local function normalizeSpeed()
  local xr, yr = getRecords()
  if not xr or not yr then return end        -- safety: no records

  local vx = tonumber(xr.Value) or 0
  local vy = tonumber(yr.Value) or 0
  local r = math.sqrt(vx*vx + vy*vy)

  if r &lt; 0.0001 then return end              -- avoid division by zero

  local ratio = speed/r
  xr.Value = vx*ratio
  yr.Value = vy*ratio
end

----------------------------------------------------------------------
-- Stop function: set both velocity components to 0
-- Called when DOWN arrow is pressed (0x28).
----------------------------------------------------------------------
local function stopSpeed()
  local xr, yr = getRecords()
  if xr and yr then
    xr.Value=0
    yr.Value=0
  end
end

----------------------------------------------------------------------
-- Hotkeys
-- UP arrow (0x26): normalize vector to constant speed
-- DOWN arrow (0x28): stop movement (zero velocity)
----------------------------------------------------------------------

hk1=createHotkey(function()
  normalizeSpeed()
end,0x26)

hk2=createHotkey(function()
  stopSpeed()
end,0x28)

[DISABLE]

-- Clean up hotkeys properly, so multiple enables/disables don’t leave “ghost” hotkeys
if hk1 then hk1.destroy() hk1=nil end
if hk2 then hk2.destroy() hk2=nil end
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>11</ID>
          <Description>"Geared Speeder"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}

[ENABLE]

-- This script ensures that while pressing UP (↑), you (or any character/object
-- whose speed is represented in the cheat table with memory records named
-- 'xspeed' and 'yspeed') move with constant speed in whichever direction you're currently going.
--
-- ⚡ The constant speed comes from the 'speedTable' below, where you can pick gears
--   (10, 20, 40, 80) with W/S hotkeys.
-- ⚡ While pressing UP, it normalizes your velocity vector (x/y) to have length = gear speed.
-- ⚡ Pressing DOWN instantly zeroes out velocity (a quick stop).
--
-- ✨ Improvements over the crashing version:
--   1. Freshly fetches memory records each time (so no stale references).
--   2. Handles missing memory records gracefully (if nil, script no-ops instead of crashing).
--   3. Division by zero guard (if x=y=0, skip math).
--   4. Proper cleanup in [DISABLE] to avoid duplicate hotkeys.

-- List of available speeds (like “gears”)
local speedTable={10,20,40,80}
local index=1  -- current gear index (starts at 1)

-- Names of the cheat table entries holding velocity components
local speedXString='xspeed'
local speedYString='yspeed'

----------------------------------------------------------------------
-- Utility: get length of Lua table (since we cycle through speedTable)
----------------------------------------------------------------------
local function getLen(tbl)
  local count=0
  for _ in pairs(tbl) do count=count+1 end
  return count
end

----------------------------------------------------------------------
-- Helper: resolve memory record handles every time
-- This avoids stale references when you save/load tables or re-open CE
----------------------------------------------------------------------
local function getRecords()
  local t=getAddressList()
  local xr = t.getMemoryRecordByDescription(speedXString)
  local yr = t.getMemoryRecordByDescription(speedYString)
  return xr, yr
end

----------------------------------------------------------------------
-- Main action: normalize current velocity to selected 'gear' speed
--  Called when UP arrow is pressed (0x26).
----------------------------------------------------------------------
local function normalizeSpeed()
  local xr, yr = getRecords()
  if not xr or not yr then return end -- safety: no addresses, no adjustments

  local vx = tonumber(xr.Value) or 0
  local vy = tonumber(yr.Value) or 0
  local r = math.sqrt(vx*vx + vy*vy)

  if r &lt; 0.0001 then return end  -- guard: avoid division by zero if stationary

  local ratio = speedTable[index]/r
  xr.Value = vx*ratio
  yr.Value = vy*ratio
end

----------------------------------------------------------------------
-- Stop action: sets both speed components to 0 instantly
--  Called when DOWN arrow is pressed (0x28).
----------------------------------------------------------------------
local function stopSpeed()
  local xr, yr = getRecords()
  if xr and yr then
    xr.Value=0
    yr.Value=0
  end
end

----------------------------------------------------------------------
-- Hotkeys setup
-- W (0x57): gear up
-- S (0x53): gear down
-- UP arrow (0x26): normalize velocity
-- DOWN arrow (0x28): stop immediately
----------------------------------------------------------------------

incGear=createHotkey(function()
  if index &lt; getLen(speedTable) then
    index=index+1
  end
end,0x57)

decGear=createHotkey(function()
  if index &gt; 1 then
    index=index-1
  end
end,0x53)

hk1=createHotkey(function()
  normalizeSpeed()
end,0x26)   -- UP arrow

hk2=createHotkey(function()
  stopSpeed()
end,0x28)   -- DOWN arrow

[DISABLE]

-- Clean up hotkeys properly so they don't pile up after script disable/enable cycles
if hk1 then hk1.destroy() hk1=nil end
if hk2 then hk2.destroy() hk2=nil end
if incGear then incGear.destroy() incGear=nil end
if decGear then decGear.destroy() decGear=nil end
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>71</ID>
          <Description>"No Fall From Jump"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{ Game   : FarCry5.exe
  Version: 
  Date   : 2025-09-28
  Author : atult

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(NoFall,FC_m64.dll,0F 85 8D 00 00 00 0F 28 8F) // should be unique
alloc(newmem,$250,NoFall)

label(code)
label(return)

newmem:

code:
  je FC_m64.dll+6BB3925
  jmp return

NoFall:
  jmp newmem
  nop
return:
registersymbol(NoFall)

[DISABLE]

NoFall:
  db 0F 85 8D 00 00 00

unregistersymbol(NoFall)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: FC_m64.dll+6BB3892

FC_m64.dll+6BB384F: 0F 29 5C 24 60                 - movaps [rsp+60],xmm3
FC_m64.dll+6BB3854: F3 0F 11 BC 24 80 00 00 00     - movss [rsp+00000080],xmm7
FC_m64.dll+6BB385D: F3 44 0F 11 84 24 84 00 00 00  - movss [rsp+00000084],xmm8
FC_m64.dll+6BB3867: 0F 29 64 24 50                 - movaps [rsp+50],xmm4
FC_m64.dll+6BB386C: 0F 29 44 24 70                 - movaps [rsp+70],xmm0
FC_m64.dll+6BB3871: E8 0A 73 9B FC                 - call FC_m64.FCE_ItemRenderer_IsCurrentThumbnailsProcessDone+2820
FC_m64.dll+6BB3876: 44 0F 28 84 24 90 00 00 00     - movaps xmm8,[rsp+00000090]
FC_m64.dll+6BB387F: 40 84 F6                       - test sil,sil
FC_m64.dll+6BB3882: 48 8B B4 24 D0 00 00 00        - mov rsi,[rsp+000000D0]
FC_m64.dll+6BB388A: 0F 28 BC 24 A0 00 00 00        - movaps xmm7,[rsp+000000A0]
// ---------- INJECTING HERE ----------
FC_m64.dll+6BB3892: 0F 85 8D 00 00 00              - jne FC_m64.dll+6BB3925
// ---------- DONE INJECTING  ----------
FC_m64.dll+6BB3898: 0F 28 8F B0 00 00 00           - movaps xmm1,[rdi+000000B0]
FC_m64.dll+6BB389F: 0F 59 4F 10                    - mulps xmm1,[rdi+10]
FC_m64.dll+6BB38A3: 0F 28 D1                       - movaps xmm2,xmm1
FC_m64.dll+6BB38A6: 0F 28 C1                       - movaps xmm0,xmm1
FC_m64.dll+6BB38A9: 0F C6 C1 00                    - shufps xmm0,xmm1,00
FC_m64.dll+6BB38AD: 0F C6 D1 55                    - shufps xmm2,xmm1,55
FC_m64.dll+6BB38B1: 0F 58 D0                       - addps xmm2,xmm0
FC_m64.dll+6BB38B4: 0F C6 C9 AA                    - shufps xmm1,xmm1,-56
FC_m64.dll+6BB38B8: 0F 58 D1                       - addps xmm2,xmm1
FC_m64.dll+6BB38BB: F3 0F 59 97 88 00 00 00        - mulss xmm2,[rdi+00000088]
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>99</ID>
          <Description>"Vehicle Gear System"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}

[ENABLE]

-- This script ensures that while pressing UP (↑), you (or any character/object
-- whose speed is represented in the cheat table with memory records named
-- 'xspeed' and 'yspeed') move with constant speed in whichever direction you're currently going.
--
-- ⚡ The constant speed comes from the 'speedTable' below, where you can pick gears
--   (10, 20, 40, 80) with W/S hotkeys.
-- ⚡ While pressing UP, it normalizes your velocity vector (x/y) to have length = gear speed.
-- ⚡ Pressing DOWN instantly zeroes out velocity (a quick stop).
--
-- ✨ Improvements over the crashing version:
--   1. Freshly fetches memory records each time (so no stale references).
--   2. Handles missing memory records gracefully (if nil, script no-ops instead of crashing).
--   3. Division by zero guard (if x=y=0, skip math).
--   4. Proper cleanup in [DISABLE] to avoid duplicate hotkeys.

-- List of available speeds (like “gears”)
local speedTable={3,6,10,20,40,80}
local index=1  -- current gear index (starts at 1)

-- Names of the cheat table entries holding velocity components
local speedXString='vxspeed'
local speedYString='vyspeed'

----------------------------------------------------------------------
-- Utility: get length of Lua table (since we cycle through speedTable)
----------------------------------------------------------------------
local function getLen(tbl)
  local count=0
  for _ in pairs(tbl) do count=count+1 end
  return count
end

----------------------------------------------------------------------
-- Helper: resolve memory record handles every time
-- This avoids stale references when you save/load tables or re-open CE
----------------------------------------------------------------------
local function getRecords()
  local t=getAddressList()
  local xr = t.getMemoryRecordByDescription(speedXString)
  local yr = t.getMemoryRecordByDescription(speedYString)
  return xr, yr
end

----------------------------------------------------------------------
-- Main action: normalize current velocity to selected 'gear' speed
--  Called when UP arrow is pressed (0x26).
----------------------------------------------------------------------
local function normalizeSpeed()
  local xr, yr = getRecords()
  if not xr or not yr then return end -- safety: no addresses, no adjustments

  local vx = tonumber(xr.Value) or 0
  local vy = tonumber(yr.Value) or 0
  local r = math.sqrt(vx*vx + vy*vy)

  if r &lt; 0.0001 then return end  -- guard: avoid division by zero if stationary

  local ratio = speedTable[index]/r
  xr.Value = vx*ratio
  yr.Value = vy*ratio
end

----------------------------------------------------------------------
-- Stop action: sets both speed components to 0 instantly
--  Called when DOWN arrow is pressed (0x28).
----------------------------------------------------------------------
local function stopSpeed()
  local xr, yr = getRecords()
  if xr and yr then
    xr.Value=0
    yr.Value=0
  end
end

----------------------------------------------------------------------
-- Hotkeys setup
-- W (0x57): gear up
-- S (0x53): gear down
-- UP arrow (0x26): normalize velocity
-- DOWN arrow (0x28): stop immediately
----------------------------------------------------------------------

incGear=createHotkey(function()
  if index &lt; getLen(speedTable) then
    index=index+1
  end
end,0x57)

decGear=createHotkey(function()
  if index &gt; 1 then
    index=index-1
  end
end,0x53)

hk1=createHotkey(function()
  normalizeSpeed()
end,0x26)   -- UP arrow

hk2=createHotkey(function()
  stopSpeed()
end,0x28)   -- DOWN arrow

[DISABLE]

-- Clean up hotkeys properly so they don't pile up after script disable/enable cycles
if hk1 then hk1.destroy() hk1=nil end
if hk2 then hk2.destroy() hk2=nil end
if incGear then incGear.destroy() incGear=nil end
if decGear then decGear.destroy() decGear=nil end
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>10</ID>
      <Description>"ADDRESS"</Description>
      <Options moAllowManualCollapseAndExpand="1"/>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>32</ID>
          <Description>"POINTERS"</Description>
          <Options moAllowManualCollapseAndExpand="1"/>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>15</ID>
              <Description>"Health Pointer 1"</Description>
              <VariableType>Float</VariableType>
              <Address>"FC_m64.dll"+04E78408</Address>
              <Offsets>
                <Offset>18</Offset>
                <Offset>48</Offset>
                <Offset>20</Offset>
                <Offset>48</Offset>
                <Offset>0</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>16</ID>
              <Description>"Health Pointer 2"</Description>
              <VariableType>Float</VariableType>
              <Address>"FC_m64.dll"+04E78408</Address>
              <Offsets>
                <Offset>18</Offset>
                <Offset>48</Offset>
                <Offset>20</Offset>
                <Offset>50</Offset>
                <Offset>50</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>17</ID>
              <Description>"Health Pointer 3"</Description>
              <VariableType>Float</VariableType>
              <Address>"FC_m64.dll"+04E78408</Address>
              <Offsets>
                <Offset>18</Offset>
                <Offset>48</Offset>
                <Offset>20</Offset>
                <Offset>4C</Offset>
                <Offset>A0</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>18</ID>
              <Description>"Health Pointer 4"</Description>
              <VariableType>Float</VariableType>
              <Address>"FC_m64.dll"+04E78408</Address>
              <Offsets>
                <Offset>18</Offset>
                <Offset>0</Offset>
                <Offset>18</Offset>
                <Offset>20</Offset>
                <Offset>48</Offset>
                <Offset>0</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>20</ID>
              <Description>"Health Pointer 6"</Description>
              <VariableType>Float</VariableType>
              <Address>"FC_m64.dll"+04E78408</Address>
              <Offsets>
                <Offset>18</Offset>
                <Offset>0</Offset>
                <Offset>18</Offset>
                <Offset>20</Offset>
                <Offset>38</Offset>
                <Offset>4</Offset>
                <Offset>A0</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>21</ID>
              <Description>"Health Pointer 7"</Description>
              <VariableType>Float</VariableType>
              <Address>"FC_m64.dll"+04E78408</Address>
              <Offsets>
                <Offset>18</Offset>
                <Offset>48</Offset>
                <Offset>8</Offset>
                <Offset>50</Offset>
                <Offset>20</Offset>
                <Offset>48</Offset>
                <Offset>0</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>23</ID>
              <Description>"Health Pointer 8"</Description>
              <VariableType>Float</VariableType>
              <Address>"FC_m64.dll"+04E78408</Address>
              <Offsets>
                <Offset>18</Offset>
                <Offset>48</Offset>
                <Offset>8</Offset>
                <Offset>3E8</Offset>
                <Offset>20</Offset>
                <Offset>4C</Offset>
                <Offset>A0</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>24</ID>
              <Description>"Health Pointer 9"</Description>
              <VariableType>Float</VariableType>
              <Address>"FC_m64.dll"+04E78408</Address>
              <Offsets>
                <Offset>18</Offset>
                <Offset>48</Offset>
                <Offset>8</Offset>
                <Offset>4A8</Offset>
                <Offset>20</Offset>
                <Offset>48</Offset>
                <Offset>0</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>25</ID>
              <Description>"Health Pointer 10"</Description>
              <VariableType>Float</VariableType>
              <Address>"FC_m64.dll"+04E73340</Address>
              <Offsets>
                <Offset>18</Offset>
                <Offset>48</Offset>
                <Offset>20</Offset>
                <Offset>4C</Offset>
                <Offset>F0</Offset>
                <Offset>1B8</Offset>
                <Offset>10</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>26</ID>
              <Description>"Health Pointer 11"</Description>
              <VariableType>Float</VariableType>
              <Address>"FC_m64.dll"+04D96A28</Address>
              <Offsets>
                <Offset>18</Offset>
                <Offset>48</Offset>
                <Offset>B8</Offset>
                <Offset>A8</Offset>
                <Offset>10</Offset>
                <Offset>80</Offset>
                <Offset>10</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>28</ID>
              <Description>"Health Pointer 13"</Description>
              <VariableType>Float</VariableType>
              <Address>"FC_m64.dll"+04E783E0</Address>
              <Offsets>
                <Offset>18</Offset>
                <Offset>48</Offset>
                <Offset>B8</Offset>
                <Offset>A8</Offset>
                <Offset>10</Offset>
                <Offset>120</Offset>
                <Offset>50</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>31</ID>
              <Description>"Health Pointer 16"</Description>
              <VariableType>Float</VariableType>
              <Address>"FC_m64.dll"+04F3EC48</Address>
              <Offsets>
                <Offset>18</Offset>
                <Offset>48</Offset>
                <Offset>B8</Offset>
                <Offset>A8</Offset>
                <Offset>10</Offset>
                <Offset>0</Offset>
                <Offset>2A8</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>56</ID>
              <Description>"X Speed Pointer 1"</Description>
              <VariableType>Float</VariableType>
              <Address>"FC_m64.dll"+04F3EC60</Address>
              <Offsets>
                <Offset>448</Offset>
                <Offset>260</Offset>
                <Offset>E0</Offset>
                <Offset>8</Offset>
                <Offset>A8</Offset>
                <Offset>10</Offset>
                <Offset>0</Offset>
                <Offset>220</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>57</ID>
              <Description>"X Speed Pointer 2"</Description>
              <VariableType>Float</VariableType>
              <Address>"FC_m64.dll"+04E9E590</Address>
              <Offsets>
                <Offset>448</Offset>
                <Offset>260</Offset>
                <Offset>E0</Offset>
                <Offset>8</Offset>
                <Offset>A8</Offset>
                <Offset>10</Offset>
                <Offset>0</Offset>
                <Offset>90</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>61</ID>
              <Description>"X Speed Pointer 6"</Description>
              <VariableType>Float</VariableType>
              <Address>"FC_m64.dll"+04E78408</Address>
              <Offsets>
                <Offset>448</Offset>
                <Offset>260</Offset>
                <Offset>E0</Offset>
                <Offset>8</Offset>
                <Offset>A8</Offset>
                <Offset>10</Offset>
                <Offset>10</Offset>
                <Offset>0</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>62</ID>
              <Description>"X Speed Pointer 7"</Description>
              <VariableType>Float</VariableType>
              <Address>"FC_m64.dll"+04E783E0</Address>
              <Offsets>
                <Offset>448</Offset>
                <Offset>260</Offset>
                <Offset>E0</Offset>
                <Offset>8</Offset>
                <Offset>A8</Offset>
                <Offset>10</Offset>
                <Offset>4</Offset>
                <Offset>A0</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>63</ID>
              <Description>"X Speed Pointer 8"</Description>
              <VariableType>Float</VariableType>
              <Address>"FC_m64.dll"+04F43078</Address>
              <Offsets>
                <Offset>448</Offset>
                <Offset>260</Offset>
                <Offset>E0</Offset>
                <Offset>8</Offset>
                <Offset>A8</Offset>
                <Offset>10</Offset>
                <Offset>30</Offset>
                <Offset>70</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>64</ID>
              <Description>"X Speed Pointer 9"</Description>
              <VariableType>Float</VariableType>
              <Address>"FC_m64.dll"+04D95350</Address>
              <Offsets>
                <Offset>448</Offset>
                <Offset>260</Offset>
                <Offset>E0</Offset>
                <Offset>20</Offset>
                <Offset>18</Offset>
                <Offset>20</Offset>
                <Offset>0</Offset>
                <Offset>40</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>65</ID>
              <Description>"X Speed Pointer 10"</Description>
              <VariableType>Float</VariableType>
              <Address>"FC_m64.dll"+04EC5010</Address>
              <Offsets>
                <Offset>448</Offset>
                <Offset>260</Offset>
                <Offset>E0</Offset>
                <Offset>20</Offset>
                <Offset>18</Offset>
                <Offset>20</Offset>
                <Offset>0</Offset>
                <Offset>228</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>66</ID>
              <Description>"X Speed Pointer 11"</Description>
              <VariableType>Float</VariableType>
              <Address>"FC_m64.dll"+04EC5018</Address>
              <Offsets>
                <Offset>448</Offset>
                <Offset>260</Offset>
                <Offset>E0</Offset>
                <Offset>20</Offset>
                <Offset>18</Offset>
                <Offset>220</Offset>
                <Offset>0</Offset>
                <Offset>40</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>67</ID>
              <Description>"X Speed Pointer 12"</Description>
              <VariableType>Float</VariableType>
              <Address>"FC_m64.dll"+04F43078</Address>
              <Offsets>
                <Offset>448</Offset>
                <Offset>260</Offset>
                <Offset>E0</Offset>
                <Offset>20</Offset>
                <Offset>18</Offset>
                <Offset>688</Offset>
                <Offset>8</Offset>
                <Offset>70</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>68</ID>
              <Description>"X Speed Pointer 13"</Description>
              <VariableType>Float</VariableType>
              <Address>"FC_m64.dll"+04F43078</Address>
              <Offsets>
                <Offset>448</Offset>
                <Offset>260</Offset>
                <Offset>E0</Offset>
                <Offset>20</Offset>
                <Offset>18</Offset>
                <Offset>6C8</Offset>
                <Offset>8</Offset>
                <Offset>70</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>69</ID>
              <Description>"X Speed Pointer 14"</Description>
              <VariableType>Float</VariableType>
              <Address>"FC_m64.dll"+04F43078</Address>
              <Offsets>
                <Offset>448</Offset>
                <Offset>260</Offset>
                <Offset>E0</Offset>
                <Offset>20</Offset>
                <Offset>18</Offset>
                <Offset>6C8</Offset>
                <Offset>38</Offset>
                <Offset>70</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>78</ID>
              <Description>"z speed pointer 1"</Description>
              <VariableType>Float</VariableType>
              <Address>"FC_m64.dll"+04D95350</Address>
              <Offsets>
                <Offset>34</Offset>
                <Offset>240</Offset>
                <Offset>50</Offset>
                <Offset>4D0</Offset>
                <Offset>40</Offset>
                <Offset>0</Offset>
                <Offset>30</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>79</ID>
              <Description>"z speed pointer 2"</Description>
              <VariableType>Float</VariableType>
              <Address>"FC_m64.dll"+04D95350</Address>
              <Offsets>
                <Offset>34</Offset>
                <Offset>240</Offset>
                <Offset>50</Offset>
                <Offset>4D0</Offset>
                <Offset>40</Offset>
                <Offset>0</Offset>
                <Offset>A0</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>80</ID>
              <Description>"z speed pointer 3"</Description>
              <VariableType>Float</VariableType>
              <Address>"FC_m64.dll"+04D95350</Address>
              <Offsets>
                <Offset>34</Offset>
                <Offset>240</Offset>
                <Offset>50</Offset>
                <Offset>4D0</Offset>
                <Offset>60</Offset>
                <Offset>0</Offset>
                <Offset>100</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>81</ID>
              <Description>"z speed pointer 4"</Description>
              <VariableType>Float</VariableType>
              <Address>"FC_m64.dll"+04EC5010</Address>
              <Offsets>
                <Offset>34</Offset>
                <Offset>240</Offset>
                <Offset>50</Offset>
                <Offset>4D0</Offset>
                <Offset>60</Offset>
                <Offset>0</Offset>
                <Offset>110</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>83</ID>
              <Description>"z speed pointer 6"</Description>
              <VariableType>Float</VariableType>
              <Address>"FC_m64.dll"+04EC5018</Address>
              <Offsets>
                <Offset>34</Offset>
                <Offset>240</Offset>
                <Offset>50</Offset>
                <Offset>4D0</Offset>
                <Offset>60</Offset>
                <Offset>0</Offset>
                <Offset>40</Offset>
              </Offsets>
            </CheatEntry>
            <CheatEntry>
              <ID>84</ID>
              <Description>"z speed pointer 7"</Description>
              <VariableType>Float</VariableType>
              <Address>"FC_m64.dll"+04EC5018</Address>
              <Offsets>
                <Offset>34</Offset>
                <Offset>240</Offset>
                <Offset>50</Offset>
                <Offset>4D0</Offset>
                <Offset>60</Offset>
                <Offset>8</Offset>
                <Offset>40</Offset>
              </Offsets>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>33</ID>
          <Description>"Health"</Description>
          <VariableType>Float</VariableType>
          <Address>"FC_m64.dll"+04E78408</Address>
          <Offsets>
            <Offset>18</Offset>
            <Offset>48</Offset>
            <Offset>20</Offset>
            <Offset>48</Offset>
            <Offset>0</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>70</ID>
          <Description>"xspeed"</Description>
          <Options moAllowManualCollapseAndExpand="1"/>
          <VariableType>Float</VariableType>
          <Address>"FC_m64.dll"+04F3EC60</Address>
          <Offsets>
            <Offset>448</Offset>
            <Offset>260</Offset>
            <Offset>E0</Offset>
            <Offset>8</Offset>
            <Offset>A8</Offset>
            <Offset>10</Offset>
            <Offset>0</Offset>
            <Offset>220</Offset>
          </Offsets>
          <CheatEntries>
            <CheatEntry>
              <ID>6</ID>
              <Description>"yspeed"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>Float</VariableType>
              <Address>+4</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>85</ID>
              <Description>"zspeed"</Description>
              <VariableType>Float</VariableType>
              <Address>"FC_m64.dll"+04D95350</Address>
              <Offsets>
                <Offset>34</Offset>
                <Offset>240</Offset>
                <Offset>50</Offset>
                <Offset>4D0</Offset>
                <Offset>40</Offset>
                <Offset>0</Offset>
                <Offset>30</Offset>
              </Offsets>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>96</ID>
          <Description>"vxspeed"</Description>
          <Options moAllowManualCollapseAndExpand="1"/>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>Float</VariableType>
          <Address>1BFBB3167B0</Address>
          <CheatEntries>
            <CheatEntry>
              <ID>97</ID>
              <Description>"vyspeed"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>Float</VariableType>
              <Address>+4</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>100</ID>
              <Description>"vsteer"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>Float</VariableType>
              <Address>+18</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <CheatCodes>
    <CodeEntry>
      <Description>Code :cmp [rbx+00000188],edi (ammo watcher)</Description>
      <AddressString>FC_m64.dll+A8DD286</AddressString>
      <Before>
        <Byte>03</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>74</Byte>
        <Byte>14</Byte>
      </Before>
      <Actual>
        <Byte>39</Byte>
        <Byte>BB</Byte>
        <Byte>88</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>48</Byte>
        <Byte>8B</Byte>
        <Byte>7C</Byte>
        <Byte>24</Byte>
        <Byte>30</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Code :mov [rbx+00000188],r8d (ammo writer)</Description>
      <AddressString>FC_m64.dll+A92DDFC</AddressString>
      <Before>
        <Byte>F8</Byte>
        <Byte>44</Byte>
        <Byte>0F</Byte>
        <Byte>4C</Byte>
        <Byte>C0</Byte>
      </Before>
      <Actual>
        <Byte>44</Byte>
        <Byte>89</Byte>
        <Byte>83</Byte>
        <Byte>88</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>85</Byte>
        <Byte>FF</Byte>
        <Byte>7E</Byte>
        <Byte>07</Byte>
        <Byte>C6</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Code :movss xmm0,[rcx+18] (Health reader)</Description>
      <AddressString>FC_m64.dll+83445B0</AddressString>
      <Before>
        <Byte>0F</Byte>
        <Byte>1F</Byte>
        <Byte>44</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>10</Byte>
        <Byte>41</Byte>
        <Byte>18</Byte>
      </Actual>
      <After>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>5C</Byte>
        <Byte>41</Byte>
        <Byte>1C</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Code :mov eax,[rbx+0C] (Money watcher in shop)</Description>
      <AddressString>FC_m64.dll+AD43447</AddressString>
      <Before>
        <Byte>E9</Byte>
        <Byte>B9</Byte>
        <Byte>8F</Byte>
        <Byte>13</Byte>
        <Byte>F7</Byte>
      </Before>
      <Actual>
        <Byte>8B</Byte>
        <Byte>43</Byte>
        <Byte>0C</Byte>
      </Actual>
      <After>
        <Byte>48</Byte>
        <Byte>8B</Byte>
        <Byte>5C</Byte>
        <Byte>24</Byte>
        <Byte>30</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Code :movaps [rcx+00000120],xmm0 (X coord reader when jumping)</Description>
      <AddressString>FC_m64.dll+EFC52B2</AddressString>
      <Before>
        <Byte>28</Byte>
        <Byte>02</Byte>
        <Byte>48</Byte>
        <Byte>89</Byte>
        <Byte>CB</Byte>
      </Before>
      <Actual>
        <Byte>0F</Byte>
        <Byte>29</Byte>
        <Byte>81</Byte>
        <Byte>20</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>48</Byte>
        <Byte>85</Byte>
        <Byte>C0</Byte>
        <Byte>74</Byte>
        <Byte>3C</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Code :movss [rbx+1C],xmm0 (auto walker watcher)</Description>
      <AddressString>FC_m64.dll+6180582</AddressString>
      <Before>
        <Byte>31</Byte>
        <Byte>D2</Byte>
        <Byte>FF</Byte>
        <Byte>50</Byte>
        <Byte>38</Byte>
      </Before>
      <Actual>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>11</Byte>
        <Byte>43</Byte>
        <Byte>1C</Byte>
      </Actual>
      <After>
        <Byte>C6</Byte>
        <Byte>43</Byte>
        <Byte>32</Byte>
        <Byte>00</Byte>
        <Byte>F3</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Code :mov eax,[rbp+000000B0] (x speed watcher)</Description>
      <AddressString>FC_m64.dll+A1D5358</AddressString>
      <Before>
        <Byte>F6</Byte>
        <Byte>84</Byte>
        <Byte>C0</Byte>
        <Byte>75</Byte>
        <Byte>1A</Byte>
      </Before>
      <Actual>
        <Byte>8B</Byte>
        <Byte>85</Byte>
        <Byte>B0</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>89</Byte>
        <Byte>06</Byte>
        <Byte>8B</Byte>
        <Byte>85</Byte>
        <Byte>B4</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Code :movss [rdi+000000B0],xmm7 (x speed writer)</Description>
      <AddressString>FC_m64.dll+1B531D8</AddressString>
      <Before>
        <Byte>83</Byte>
        <Byte>AD</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>11</Byte>
        <Byte>BF</Byte>
        <Byte>B0</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>28</Byte>
        <Byte>BC</Byte>
        <Byte>24</Byte>
        <Byte>E0</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Code :sub [rdi+4C],edx (Grenade ammo subtractor)</Description>
      <AddressString>FC_m64.dll+AD8CFA6</AddressString>
      <Before>
        <Byte>39</Byte>
        <Byte>D3</Byte>
        <Byte>0F</Byte>
        <Byte>42</Byte>
        <Byte>D3</Byte>
      </Before>
      <Actual>
        <Byte>29</Byte>
        <Byte>57</Byte>
        <Byte>4C</Byte>
      </Actual>
      <After>
        <Byte>89</Byte>
        <Byte>D3</Byte>
        <Byte>85</Byte>
        <Byte>DB</Byte>
        <Byte>74</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Code :movss [rbx+34],xmm2 (Jump Velocity watcher)</Description>
      <AddressString>FC_m64.dll+6BB38C7</AddressString>
      <Before>
        <Byte>00</Byte>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>58</Byte>
        <Byte>D6</Byte>
      </Before>
      <Actual>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>11</Byte>
        <Byte>53</Byte>
        <Byte>34</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>28</Byte>
        <Byte>EA</Byte>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Change of subss xmm0,xmm1</Description>
      <AddressString>FC_m64.dll+D68D3FB</AddressString>
      <Before>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>10</Byte>
        <Byte>43</Byte>
        <Byte>74</Byte>
      </Before>
      <Actual>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>5C</Byte>
        <Byte>C1</Byte>
      </Actual>
      <After>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>5F</Byte>
        <Byte>C6</Byte>
        <Byte>0F</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Code :movaps xmm1,[rcx+00000230] (vehicle x speed)</Description>
      <AddressString>FC_m64.dll+716805</AddressString>
      <Before>
        <Byte>90</Byte>
        <Byte>F0</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>0F</Byte>
        <Byte>28</Byte>
        <Byte>89</Byte>
        <Byte>30</Byte>
        <Byte>02</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>48</Byte>
        <Byte>8B</Byte>
        <Byte>8A</Byte>
        <Byte>F0</Byte>
        <Byte>04</Byte>
      </After>
    </CodeEntry>
  </CheatCodes>
  <UserdefinedSymbols/>
  <Comments>Health initially is 150 float.
for vehicles xspeed+18=steer</Comments>
</CheatTable>
