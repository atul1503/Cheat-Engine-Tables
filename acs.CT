<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="45">
  <CheatEntries>
    <CheatEntry>
      <ID>3</ID>
      <Description>"y speed"</Description>
      <Options moAllowManualCollapseAndExpand="1"/>
      <ShowAsSigned>0</ShowAsSigned>
      <VariableType>Float</VariableType>
      <Address>[speedrdx]+118</Address>
      <CheatEntries>
        <CheatEntry>
          <ID>4</ID>
          <Description>"x speed"</Description>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>Float</VariableType>
          <Address>-8</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>5</ID>
          <Description>"z speed"</Description>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>Float</VariableType>
          <Address>-4</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>6</ID>
          <Description>"steer"</Description>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>Float</VariableType>
          <Address>+C</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>2</ID>
      <Description>"Gear system"</Description>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{$lua}

if synataxcheck then return end

[ENABLE]

local mul=1.05
local jerk=2
local gearMul=3
local gearArr={13,17,30,45,65,100}
local maxGearArrIndex=6
local gearArrIndex=1
local div=1.12
local speedXString='x speed'
local speedYString='y speed'
local speedZString='z speed'

--Instructions
--mul is the multiplier by which the car will accelerate if the speed of the car is lower than top speed.
--gearMul is the multiplier by which the speed of the car will be brought down if it is higher than the top Speed.
--gearArr is the array of top speeds of each gear.
--maxGearArrIndex is the length of the gearArr array.
--gearArrIndex points to the index of the gear the car is in at a particular point in time. But initially this value should be 1 only.
--jerk is the multiplier/divider for mul.Increasing mul results in higher power and decreasing mul results in lower power.
--Gear is increased by W and decreased by S
--When trying to use this script in a game just adjust speedStrings , gearArr values accordin to the game.
--If you want to increase the size the number of gears then make gearArr array bigger and set the maxGearArrIndex to the size of the gearArr array.

local TempUp=gearArr[gearArrIndex]


t=getAddressList()
x=t.getMemoryRecordByDescription(speedXString)
y=t.getMemoryRecordByDescription(speedYString)
z=t.getMemoryRecordByDescription(speedZString)


function adjustSpeed(x,y,tempUp,speedUp)
  if tempUp&gt;=gearArr[gearArrIndex] then
	r=((x.Value^2)+(y.Value^2)+(z.Value^2))^0.5
	if r&lt;=tempUp then
      if r*mul&lt;=tempUp then
        if speedUp then
          x.Value=x.Value*mul
          y.Value=y.Value*mul
          z.Value=z.Value*mul
        end
      else
        if speedUp then
          local ratio=tempUp/r
          x.Value=x.Value*ratio
          y.Value=y.Value*ratio
          z.Value=z.Value*ratio
        end
      end
    else
      if (r/gearMul)&gt;=tempUp then
        x.Value=x.Value/gearMul
        y.Value=y.Value/gearMul
        z.Value=z.Value/gearMul
      else
        local ratio=tempUp/r
        x.Value=x.Value*ratio
        y.Value=y.Value*ratio
        z.Value=z.Value*ratio
      end
    end
  end
end


normal=createHotkey(function()
adjustSpeed(x,y,TempUp,true)
end,0x5807) --UP key


up=createHotkey(function()
if gearArrIndex &lt; maxGearArrIndex then
   gearArrIndex=gearArrIndex+1
   TempUp=gearArr[gearArrIndex]
end
adjustSpeed(x,y,TempUp,false)
end,0x5830) --W

down=createHotkey(function()
if gearArrIndex &gt; 1 then
   gearArrIndex=gearArrIndex-1
   TempUp=gearArr[gearArrIndex]
end
adjustSpeed(x,y,TempUp,false)
end,0x5831) --S

reset=createHotkey(function()
gearArrIndex=1
TempUp=gearArr[gearArrIndex]
adjustSpeed(x,y,TempUp,false)
end,0x20) --SPACE



brake=createHotkey(function()
x.Value=x.Value/div
y.Value=y.Value/div
end,0x5806) --Down



[DISABLE]
normal.destroy()
up.destroy()
down.destroy()
reset.destroy()
brake.destroy()
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>8</ID>
      <Description>"Speed capture script"</Description>
      <Options moDeactivateChildrenAsWell="1" moAllowManualCollapseAndExpand="1"/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : acs.exe
  Version: 
  Date   : 2024-07-22
  Author : atult

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(speedy,acs.exe,8B 82 18 01 00 00 F3) // should be unique
alloc(newmem,$1000,speedy)
alloc(speedrdx,8)
alloc(flag,4)
registersymbol(flag)
registersymbol(speedrdx)
label(code)
label(return)

newmem:
cmp [flag],0
jne code
mov [speedrdx],rdx
mov [flag],1

code:
  mov eax,[rdx+00000118]
  jmp return

speedy:
  jmp newmem
  nop
return:
registersymbol(speedy)

flag:
db

[DISABLE]

speedy:
  db 8B 82 18 01 00 00

unregistersymbol(speedrdx)
unregistersymbol(speedy)
dealloc(newmem)
unregistersymbol(flag)
dealloc(speedrdx)
dealloc(flag)

{
// ORIGINAL CODE - INJECTION POINT: acs.exe+31A7E

acs.exe+31A46: F3 0F 59 81 E0 00 00 00  - mulss xmm0,[rcx+000000E0]
acs.exe+31A4E: F3 0F 59 99 F8 00 00 00  - mulss xmm3,[rcx+000000F8]
acs.exe+31A56: F3 0F 59 89 E8 00 00 00  - mulss xmm1,[rcx+000000E8]
acs.exe+31A5E: F3 0F 58 F0              - addss xmm6,xmm0
acs.exe+31A62: F3 0F 58 F1              - addss xmm6,xmm1
acs.exe+31A66: F3 0F 59 A9 F0 00 00 00  - mulss xmm5,[rcx+000000F0]
acs.exe+31A6E: 48 8B 4C 24 60           - mov rcx,[rsp+60]
acs.exe+31A73: 89 01                    - mov [rcx],eax
acs.exe+31A75: 8B 82 14 01 00 00        - mov eax,[rdx+00000114]
acs.exe+31A7B: 89 41 04                 - mov [rcx+04],eax
// ---------- INJECTING HERE ----------
acs.exe+31A7E: 8B 82 18 01 00 00        - mov eax,[rdx+00000118]
// ---------- DONE INJECTING  ----------
acs.exe+31A84: F3 44 0F 58 C5           - addss xmm8,xmm5
acs.exe+31A89: F3 44 0F 58 C3           - addss xmm8,xmm3
acs.exe+31A8E: 89 41 08                 - mov [rcx+08],eax
acs.exe+31A91: F3 0F 10 8A 24 01 00 00  - movss xmm1,[rdx+00000124]
acs.exe+31A99: F3 0F 10 A2 28 01 00 00  - movss xmm4,[rdx+00000128]
acs.exe+31AA1: F3 0F 10 92 20 01 00 00  - movss xmm2,[rdx+00000120]
acs.exe+31AA9: 0F 28 C4                 - movaps xmm0,xmm4
acs.exe+31AAC: F3 0F 59 E7              - mulss xmm4,xmm7
acs.exe+31AB0: 0F 28 D9                 - movaps xmm3,xmm1
acs.exe+31AB3: F3 0F 59 C6              - mulss xmm0,xmm6
}
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>7</ID>
          <Description>"Front speeder"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}

[ENABLE]
-- Clean up any existing timers/hotkeys from previous runs
if _G.carTimer then
    pcall(function() _G.carTimer.destroy() end)
    _G.carTimer = nil
end

if _G.leftHotkey then
    pcall(function() _G.leftHotkey.destroy() end)
    _G.leftHotkey = nil
end

if _G.rightHotkey then
    pcall(function() _G.rightHotkey.destroy() end)
    _G.rightHotkey = nil
end

-- Configuration
_G.turn = 1.5
_G.mul = 1 + 8e-3
_G.ratio = 0.85

-- Initialize memory records
local function initMemoryRecords()
    local list = getAddressList()
    if not list then return false end

    _G.xspeed = list.getMemoryRecordByDescription('x speed')
    _G.yspeed = list.getMemoryRecordByDescription('y speed')
    _G.steer = list.getMemoryRecordByDescription('steer')

    if not _G.xspeed or not _G.yspeed or not _G.steer then
        return false
    end

    return true
end

-- Safe memory operations
local function getSafeValue(record)
    if not record then return 0 end

    local success, value = pcall(function()
        local val = record.Value
        if val == nil or val == "??" or val == "" then return 0 end
        return tonumber(val) or 0
    end)

    return success and value or 0
end

local function setSafeValue(record, value)
    if not record then return false end
    if not value or value ~= value or math.abs(value) &gt; 1e10 then return false end

    local success = pcall(function() record.Value = value end)
    return success
end

-- Main rotation logic
local function rotate()
    local xVal = getSafeValue(_G.xspeed)
    local yVal = getSafeValue(_G.yspeed)
    local steerVal = getSafeValue(_G.steer)

    -- Auto-decay steer when no keys pressed
    local leftPressed = isKeyPressed(0x25)
    local rightPressed = isKeyPressed(0x27)

    if not leftPressed and not rightPressed and steerVal ~= 0 then
        local decay = 0.5
        local newSteer = steerVal * decay
        if math.abs(newSteer) &lt; 0.001 then newSteer = 0 end
        setSafeValue(_G.steer, newSteer)
        steerVal = newSteer
    end

    -- Calculate rotation
    local theta = math.rad(-_G.ratio * steerVal)
    local r = math.sqrt(xVal^2 + yVal^2)

    if r &lt; 1e-10 then return end

    -- Normalize and rotate
    local x = xVal / r
    local y = yVal / r
    local xcomp = x * math.cos(theta) - y * math.sin(theta)
    local ycomp = x * math.sin(theta) + y * math.cos(theta)

    -- Apply base rotation
    local newX = xcomp * r
    local newY = ycomp * r

    -- Check for key modifiers
    local upPressed = isKeyPressed(0x26)
    local downPressed = isKeyPressed(0x28)

    if upPressed then
        newX = newX * _G.mul
        newY = newY * _G.mul
    end

    if downPressed then
        newX = newX / (_G.mul * 1.03)
        newY = newY / (_G.mul * 1.03)
    end

    -- Set new values
    setSafeValue(_G.xspeed, newX)
    setSafeValue(_G.yspeed, newY)
end

-- Steer adjustment function
local function handleSteerAdjustment(adjustment)
    if not _G.steer then return end

    local currentVal = getSafeValue(_G.steer)
    setSafeValue(_G.steer, currentVal + adjustment)
end

-- Initialize everything
if not initMemoryRecords() then
    return
end

-- Create timer
_G.carTimer = createTimer(getMainForm())
_G.carTimer.Interval = 50
_G.carTimer.OnTimer = function()
    pcall(rotate)
end

-- Create hotkeys
_G.leftHotkey = createHotkey(function()
    handleSteerAdjustment(_G.turn)
end, 0x25)  -- Left arrow

_G.rightHotkey = createHotkey(function()
    handleSteerAdjustment(-_G.turn)
end, 0x27)  -- Right arrow

-- Enable the timer
_G.carTimer.Enabled = true

[DISABLE]
-- Clean up all created objects
if _G.carTimer then
    _G.carTimer.Enabled = false
    pcall(function() _G.carTimer.destroy() end)
    _G.carTimer = nil
end

if _G.leftHotkey then
    pcall(function() _G.leftHotkey.destroy() end)
    _G.leftHotkey = nil
end

if _G.rightHotkey then
    pcall(function() _G.rightHotkey.destroy() end)
    _G.rightHotkey = nil
end

-- Clear global references
_G.xspeed = nil
_G.yspeed = nil
_G.steer = nil
_G.turn = nil
_G.mul = nil
_G.ratio = nil
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <CheatCodes>
    <CodeEntry>
      <Description>Code :addsd xmm0,[rcx+20] (gear something)</Description>
      <AddressString>acs.exe+2CCE4D</AddressString>
      <Before>
        <Byte>28</Byte>
        <Byte>C1</Byte>
        <Byte>0F</Byte>
        <Byte>28</Byte>
        <Byte>D9</Byte>
      </Before>
      <Actual>
        <Byte>F2</Byte>
        <Byte>0F</Byte>
        <Byte>58</Byte>
        <Byte>41</Byte>
        <Byte>20</Byte>
      </Actual>
      <After>
        <Byte>F2</Byte>
        <Byte>0F</Byte>
        <Byte>11</Byte>
        <Byte>41</Byte>
        <Byte>20</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Code :movss xmm2,[rbx+00000528] (maybe wheel speed)</Description>
      <AddressString>acs.exe+2EA83A</AddressString>
      <Before>
        <Byte>A3</Byte>
        <Byte>74</Byte>
        <Byte>02</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>10</Byte>
        <Byte>93</Byte>
        <Byte>28</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>2F</Byte>
        <Byte>D0</Byte>
        <Byte>76</Byte>
        <Byte>05</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Code :mov eax,[rdx+00000118] (y speed)</Description>
      <AddressString>acs.exe+31A7E</AddressString>
      <Before>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>89</Byte>
        <Byte>41</Byte>
        <Byte>04</Byte>
      </Before>
      <Actual>
        <Byte>8B</Byte>
        <Byte>82</Byte>
        <Byte>18</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>F3</Byte>
        <Byte>44</Byte>
        <Byte>0F</Byte>
        <Byte>58</Byte>
        <Byte>C5</Byte>
      </After>
    </CodeEntry>
    <CodeEntry>
      <Description>Code :comiss xmm8,[rbx+00000284] (Points)</Description>
      <AddressString>acs.exe+224CB8</AddressString>
      <Before>
        <Byte>8B</Byte>
        <Byte>E0</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>44</Byte>
        <Byte>0F</Byte>
        <Byte>2F</Byte>
        <Byte>83</Byte>
        <Byte>84</Byte>
        <Byte>02</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>76</Byte>
        <Byte>0A</Byte>
        <Byte>41</Byte>
        <Byte>0F</Byte>
        <Byte>28</Byte>
      </After>
    </CodeEntry>
  </CheatCodes>
  <UserdefinedSymbols/>
</CheatTable>
