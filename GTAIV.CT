<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="34">
  <CheatEntries>
    <CheatEntry>
      <ID>288</ID>
      <Description>"MAIN"</Description>
      <Options moAllowManualCollapseAndExpand="1"/>
      <LastState Value="" RealAddress="00000000"/>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>3</ID>
          <Description>"Money Reference"</Description>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>4 Bytes</VariableType>
          <Address>GTAIV.exe+CB0A60</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>49</ID>
          <Description>"Health Reference"</Description>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>Float</VariableType>
          <Address>GTAIV.exe+DEC914</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>54</ID>
          <Description>"Health Pointer"</Description>
          <Options moAllowManualCollapseAndExpand="1"/>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

aobscanmodule(health,xlive.dll,8B 50 10 89 11) // should be unique
alloc(newmem,$150)
alloc(h4,4)
label(code)
label(return)
registersymbol(h4)

newmem:
push edi
mov edi,[GTAIV.exe+DEC914]
cmp edi,[eax+10]
pop edi
jne code
mov [h4],eax

code:
  mov edx,[eax+10]
  mov [ecx],edx
  jmp return

health:
  jmp newmem
return:
registersymbol(health)

[DISABLE]

health:
  db 8B 50 10 89 11

dealloc(h4)
unregistersymbol(h4)
unregistersymbol(health)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: xlive.XLivePBufferGetDWORD+3B

xlive.XLivePBufferGetDWORD+20: 83 EA 04     - sub edx,04
xlive.XLivePBufferGetDWORD+23: 39 55 0C     - cmp [ebp+0C],edx
xlive.XLivePBufferGetDWORD+26: 77 06        - ja xlive.XLivePBufferGetDWORD+2E
xlive.XLivePBufferGetDWORD+28: 83 7D 10 00  - cmp dword ptr [ebp+10],00
xlive.XLivePBufferGetDWORD+2C: 75 04        - jne xlive.XLivePBufferGetDWORD+32
xlive.XLivePBufferGetDWORD+2E: 33 C0        - xor eax,eax
xlive.XLivePBufferGetDWORD+30: EB 10        - jmp xlive.XLivePBufferGetDWORD+42
xlive.XLivePBufferGetDWORD+32: 8B 45 08     - mov eax,[ebp+08]
xlive.XLivePBufferGetDWORD+35: 03 45 0C     - add eax,[ebp+0C]
xlive.XLivePBufferGetDWORD+38: 8B 4D 10     - mov ecx,[ebp+10]
// ---------- INJECTING HERE ----------
xlive.XLivePBufferGetDWORD+3B: 8B 50 10     - mov edx,[eax+10]
// ---------- DONE INJECTING  ----------
xlive.XLivePBufferGetDWORD+3E: 89 11        - mov [ecx],edx
xlive.XLivePBufferGetDWORD+40: 33 C0        - xor eax,eax
xlive.XLivePBufferGetDWORD+42: 5D           - pop ebp
xlive.XLivePBufferGetDWORD+43: C2 0C 00     - ret 000C
xlive.XLivePBufferGetDWORD+46: CC           - int 3 
xlive.XLivePBufferGetDWORD+47: CC           - int 3 
xlive.XLivePBufferGetDWORD+48: CC           - int 3 
xlive.XLivePBufferGetDWORD+49: CC           - int 3 
xlive.XLivePBufferGetDWORD+4A: CC           - int 3 
xlive.XLivePBufferGetDWORD+4B: CC           - int 3 
}
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>55</ID>
              <Description>"Health"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>Float</VariableType>
              <Address>[h4]+10</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>277</ID>
          <Description>"Location Reference"</Description>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>Float</VariableType>
          <Address>GTAIV.exe+F00F94</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>278</ID>
          <Description>"Location Pointer"</Description>
          <Options moAllowManualCollapseAndExpand="1"/>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

aobscanmodule(location,GTAIV.exe,D9 99 04 01 00 00 D9 40 38) // should be unique
alloc(newmem,$150)
alloc(loc,4)
label(code)
label(return)
registersymbol(loc)
newmem:
push edx
mov edx,[GTAIV.exe+F00F94]
cmp edx,[ecx+104]
pop edx
jne code
mov [loc],ecx

code:
  fstp dword ptr [ecx+00000104]
  jmp return

location:
  jmp newmem
  nop
return:
registersymbol(location)

[DISABLE]

location:
  db D9 99 04 01 00 00

unregistersymbol(loc)
dealloc(loc)
unregistersymbol(location)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: GTAIV.exe+1E2C90

GTAIV.exe+1E2C63: D9 99 E8 00 00 00  - fstp dword ptr [ecx+000000E8]
GTAIV.exe+1E2C69: D9 40 20           - fld dword ptr [eax+20]
GTAIV.exe+1E2C6C: D9 99 F0 00 00 00  - fstp dword ptr [ecx+000000F0]
GTAIV.exe+1E2C72: D9 40 24           - fld dword ptr [eax+24]
GTAIV.exe+1E2C75: D9 99 F4 00 00 00  - fstp dword ptr [ecx+000000F4]
GTAIV.exe+1E2C7B: D9 40 28           - fld dword ptr [eax+28]
GTAIV.exe+1E2C7E: D9 99 F8 00 00 00  - fstp dword ptr [ecx+000000F8]
GTAIV.exe+1E2C84: D9 40 30           - fld dword ptr [eax+30]
GTAIV.exe+1E2C87: D9 99 00 01 00 00  - fstp dword ptr [ecx+00000100]
GTAIV.exe+1E2C8D: D9 40 34           - fld dword ptr [eax+34]
// ---------- INJECTING HERE ----------
GTAIV.exe+1E2C90: D9 99 04 01 00 00  - fstp dword ptr [ecx+00000104]
// ---------- DONE INJECTING  ----------
GTAIV.exe+1E2C96: D9 40 38           - fld dword ptr [eax+38]
GTAIV.exe+1E2C99: D9 99 08 01 00 00  - fstp dword ptr [ecx+00000108]
GTAIV.exe+1E2C9F: C2 04 00           - ret 0004
GTAIV.exe+1E2CA2: CC                 - int 3 
GTAIV.exe+1E2CA3: CC                 - int 3 
GTAIV.exe+1E2CA4: CC                 - int 3 
GTAIV.exe+1E2CA5: CC                 - int 3 
GTAIV.exe+1E2CA6: CC                 - int 3 
GTAIV.exe+1E2CA7: CC                 - int 3 
GTAIV.exe+1E2CA8: CC                 - int 3 
}
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>287</ID>
              <Description>"Speeder"</Description>
              <LastState/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{$lua}

if syntaxcheck then return end
[ENABLE]

local multi=2

hk=createHotkey(function()
x=readFloat('[loc]+100+30')
y=readFloat('[loc]+100+34')
writeFloat('[loc]+100+30',x*multi)
writeFloat('[loc]+100+34',y*multi)
end,0x26)



[DISABLE]
hk.destroy()

</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>279</ID>
              <Description>"X coord"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>Float</VariableType>
              <Address>[loc]+100</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>285</ID>
              <Description>"X speed"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>Float</VariableType>
              <Address>[loc]+100+30</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>280</ID>
              <Description>"Y coord"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>Float</VariableType>
              <Address>[loc]+104</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>284</ID>
              <Description>"Y speed"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>Float</VariableType>
              <Address>[loc]+100+34</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>281</ID>
              <Description>"Z coord"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>Float</VariableType>
              <Address>[loc]+108</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>286</ID>
              <Description>"Z speed"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>Float</VariableType>
              <Address>[loc]+100+38</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>290</ID>
      <Description>"Car speeder script"</Description>
      <Options moAllowManualCollapseAndExpand="1"/>
      <LastState Activated="1"/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{$lua}

if syntaxcheck then return end
[ENABLE]

local multi=1.05
local breaker=0.8

hk=createHotkey(function()
t=getAddressList()
x=t.getMemoryRecordByDescription('car x').value
y=t.getMemoryRecordByDescription('car y').value
t.getMemoryRecordByDescription('car x').value=x*multi
t.getMemoryRecordByDescription('car y').value=y*multi
end,0x57)

hk1=createHotkey(function()
t=getAddressList()
x=t.getMemoryRecordByDescription('car x').value
y=t.getMemoryRecordByDescription('car y').value
t.getMemoryRecordByDescription('car x').value=x*breaker
t.getMemoryRecordByDescription('car y').value=y*breaker
end,0x53)

hk2=createHotkey(function()
t=getAddressList()
x=t.getMemoryRecordByDescription('car x').value
y=t.getMemoryRecordByDescription('car y').value
t.getMemoryRecordByDescription('car x').value=x*0
t.getMemoryRecordByDescription('car y').value=y*0
end,0x46)


[DISABLE]
hk.destroy()
hk1.destroy()
hk2.destroy()
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>291</ID>
          <Description>"car y"</Description>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>Float</VariableType>
          <Address>073DFE24</Address>
          <CheatEntries>
            <CheatEntry>
              <ID>292</ID>
              <Description>"car x"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>Float</VariableType>
              <Address>-4</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <CheatCodes>
    <CodeEntry Color="20000000">
      <Description>Money Watcher</Description>
      <AddressString>xlive.dll+228B</AddressString>
      <Before>
        <Byte>45</Byte>
        <Byte>0C</Byte>
        <Byte>8B</Byte>
        <Byte>4D</Byte>
        <Byte>10</Byte>
      </Before>
      <Actual>
        <Byte>8B</Byte>
        <Byte>50</Byte>
        <Byte>10</Byte>
      </Actual>
      <After>
        <Byte>89</Byte>
        <Byte>11</Byte>
        <Byte>33</Byte>
        <Byte>C0</Byte>
        <Byte>5D</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Health Watcher</Description>
      <AddressString>xlive.dll+228B</AddressString>
      <Before>
        <Byte>45</Byte>
        <Byte>0C</Byte>
        <Byte>8B</Byte>
        <Byte>4D</Byte>
        <Byte>10</Byte>
      </Before>
      <Actual>
        <Byte>8B</Byte>
        <Byte>50</Byte>
        <Byte>10</Byte>
      </Actual>
      <After>
        <Byte>89</Byte>
        <Byte>11</Byte>
        <Byte>33</Byte>
        <Byte>C0</Byte>
        <Byte>5D</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Ammo</Description>
      <AddressString>xlive.dll+22D5</AddressString>
      <Before>
        <Byte>45</Byte>
        <Byte>0C</Byte>
        <Byte>8B</Byte>
        <Byte>4D</Byte>
        <Byte>10</Byte>
      </Before>
      <Actual>
        <Byte>89</Byte>
        <Byte>48</Byte>
        <Byte>10</Byte>
      </Actual>
      <After>
        <Byte>33</Byte>
        <Byte>C0</Byte>
        <Byte>5D</Byte>
        <Byte>C2</Byte>
        <Byte>0C</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Ammo writer</Description>
      <AddressString>xlive.dll+22D5</AddressString>
      <Before>
        <Byte>45</Byte>
        <Byte>0C</Byte>
        <Byte>8B</Byte>
        <Byte>4D</Byte>
        <Byte>10</Byte>
      </Before>
      <Actual>
        <Byte>89</Byte>
        <Byte>48</Byte>
        <Byte>10</Byte>
      </Actual>
      <After>
        <Byte>33</Byte>
        <Byte>C0</Byte>
        <Byte>5D</Byte>
        <Byte>C2</Byte>
        <Byte>0C</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Location Y</Description>
      <AddressString>GTAIV.exe+1E2C90</AddressString>
      <Before>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>D9</Byte>
        <Byte>40</Byte>
        <Byte>34</Byte>
      </Before>
      <Actual>
        <Byte>D9</Byte>
        <Byte>99</Byte>
        <Byte>04</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>D9</Byte>
        <Byte>40</Byte>
        <Byte>38</Byte>
        <Byte>D9</Byte>
        <Byte>99</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Car location inst</Description>
      <AddressString>GTAIV.exe+106FDA</AddressString>
      <Before>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>0F</Byte>
        <Byte>57</Byte>
        <Byte>C9</Byte>
      </Before>
      <Actual>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>11</Byte>
        <Byte>80</Byte>
        <Byte>00</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>10</Byte>
        <Byte>80</Byte>
        <Byte>94</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Car Y speed</Description>
      <AddressString>GTAIV.exe+1332B0</AddressString>
      <Before>
        <Byte>0F</Byte>
        <Byte>10</Byte>
        <Byte>44</Byte>
        <Byte>24</Byte>
        <Byte>3C</Byte>
      </Before>
      <Actual>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>11</Byte>
        <Byte>88</Byte>
        <Byte>64</Byte>
        <Byte>02</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>11</Byte>
        <Byte>90</Byte>
        <Byte>68</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="80000008">
      <Description>car sit check</Description>
      <AddressString>GTAIV.exe+1329F5</AddressString>
      <Before>
        <Byte>0F</Byte>
        <Byte>10</Byte>
        <Byte>44</Byte>
        <Byte>24</Byte>
        <Byte>3C</Byte>
      </Before>
      <Actual>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>11</Byte>
        <Byte>80</Byte>
        <Byte>DC</Byte>
        <Byte>03</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>F3</Byte>
        <Byte>0F</Byte>
        <Byte>10</Byte>
        <Byte>44</Byte>
        <Byte>24</Byte>
      </After>
    </CodeEntry>
  </CheatCodes>
  <UserdefinedSymbols/>
</CheatTable>
